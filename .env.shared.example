# Centralized Environment Configuration Example
# Copy this file to .env.shared and update with your actual values

# =============================================================================
# DATABASE CONFIGURATION (Shared between API and Database services)
# =============================================================================

# Database Connection (used by API)
DB_HOST=db
DB_PORT=3306
DB_NAME=mydatabase
DB_USER=delphi
DB_PASSWORD=your_secure_app_password_here

# Database Root Access
DB_ROOT_PASSWORD=your_secure_root_password_here

# MySQL Docker Environment Variables (used by Database container)
MYSQL_ROOT_PASSWORD=your_secure_root_password_here
MYSQL_DATABASE=mydatabase
MYSQL_USER=delphi
MYSQL_PASSWORD=your_secure_app_password_here

# =============================================================================
# API CONFIGURATION
# =============================================================================

# Server Settings
API_PORT=3001
API_HOST=0.0.0.0

# Security Settings
JWT_SECRET=your_super_secure_jwt_secret_here
SALT_ROUNDS=12

# Rate Limiting
MAX_LOGIN_ATTEMPTS=5
LOGIN_ATTEMPT_WINDOW_MINUTES=15

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Environment
NODE_ENV=development

# Frontend Settings
FRONTEND_URL=http://localhost:3000

# =============================================================================
# OPTIONAL DEVELOPMENT SETTINGS
# =============================================================================

# Debug Settings
DEBUG_MODE=false
LOG_LEVEL=info

# =============================================================================
# SECURITY NOTES
# =============================================================================

# 1. Copy this file to .env.shared and replace all placeholder values
# 2. Use strong passwords (minimum 16 characters with mixed case, numbers, symbols)
# 3. Generate secure JWT secret: openssl rand -base64 64
# 4. Never commit .env.shared with real credentials to version control
# 5. For production, use Docker secrets or external secret management systems
# 6. Consider using different database users with limited privileges for the API

# =============================================================================
# PASSWORD GENERATION EXAMPLES
# =============================================================================

# Generate secure passwords using these commands:
# openssl rand -base64 32    # For database passwords
# openssl rand -base64 64    # For JWT secrets
# openssl rand -hex 16       # For API keys
